def built_images

pipeline {
    agent any

    environment {
        PROJECT_ID = '{{cookiecutter.gcp_project_id}}'
        GCR_URL = "eu.gcr.io/${PROJECT_ID}"
        DOCKER_IMAGE_LATEST = "latest"
        COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        BASE_IMAGE = "{{cookiecutter.project_slug}}"
        BASE_IMAGE_NAME = "${env.GCR_URL}/${env.BASE_IMAGE}"
        DOCKER_IMAGE_TAG = sh(script: "echo ${GIT_BRANCH} | sed -r 's/[_/.?]+/-/g' | awk '{print tolower(\$0)}' | xargs -I@ echo @-${env.COMMIT_HASH}-${env.BUILD_NUMBER}", returnStdout: true).trim()
        PYTHON_INTERPRETER = '{{ cookiecutter.python_version }}'
        PYPI_REPO_STAGING = "http://pypi.advancedanalytics.generali.com/ge-it-aa/staging/"
        PYPI_REPO_STABLE = "http://pypi.advancedanalytics.generali.com/ge-it-aa/stable/"
        CONFLUENCE_TOKEN = credentials('confluence-token')
    }

    stages {

        stage('Clone sources') {
            steps {
                slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                sh """
                echo ${env.BRANCH_NAME}
                echo ${env.TAG_NAME}
                """
                git branch: env.gitlabSourceBranch, poll: false, credentialsId: '2bd6f462-e60e-4de9-a67c-da11e3829363', url: env.gitlabSourceRepoHttpUrl
            }
        }

        stage('Run tests') {
            environment {
                ENV='TEST'
            }
            steps {
                sh """
                ${env.PYTHON_INTERPRETER} -m venv venv
                . venv/bin/activate
                ${env.PYTHON_INTERPRETER} -m pip install -r requirements_dev.txt
                ${env.PYTHON_INTERPRETER} -m tox
                """
            }
        }


        stage('SQ analysis') {
             environment {
                scannerHome = tool 'sonar_scanner'
            }
            steps {
                withSonarQubeEnv(credentialsId: 'sonarqube_token', installationName: 'sonarqube_aa') {
                    sh '${scannerHome}/bin/sonar-scanner'
                }
            }
        }


{%- if cookiecutter.release_pypi == 'y' -%}

        stage('Staging on PyPi') {

            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'pypi-credentials', usernameVariable: 'PYPI_USERNAME', passwordVariable: 'PYPI_PASSWORD')]) {
                        sh """
                        . venv/bin/activate
                        make staging
                        """
                    }
                }
            }
        }

{% endif %}


        stage('Generate and publish doc staging') {

            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'pypi-credentials', usernameVariable: 'PYPI_USERNAME', passwordVariable: 'PYPI_PASSWORD')]) {

                        version = sh(script: "python3 setup.py --version", returnStdout: true).trim()
                        sh """
                        . venv/bin/activate
                        ${env.PYTHON_INTERPRETER} -m pip install .
                        ${env.PYTHON_INTERPRETER} -m pip install devpi-client
                        cd docs
                        make html
                        cd _build/html && zip -r {{cookiecutter.package_name}}-${version}.doc.zip . && cd -
                        devpi use ${PYPI_REPO_STAGING}
                        devpi login ${PYPI_USERNAME} --password=${PYPI_PASSWORD}
                        devpi upload _build/html/{{cookiecutter.package_name}}-${version}.doc.zip
                        """
                    }
                }
            }

        }


{%- if cookiecutter.use_docker == 'y' -%}

        stage("Build Docker images") {
            steps {
                script {
                    version = sh(script: "python3 setup.py --version", returnStdout: true).trim()
                    docker_image_base = docker.build("${BASE_IMAGE_NAME}:${DOCKER_IMAGE_TAG}", "--build-arg PACKAGE_VERSION=$version -f Dockerfile .")
                    built_images = true
                }
            }
        }

        stage("Docker image Scanning") {
            steps {
                script {
                    //We can accept LOW/MEDIUM/HIGH Vulnerabilities
                    sh "trivy --exit-code 0 --severity LOW,MEDIUM,HIGH \"${env.BASE_IMAGE_NAME}:${DOCKER_IMAGE_TAG}\""

                    // We cannot accept CRITICAL Vulnerabilities
                    // Yes, we can if there's no fix available
                    // sh "trivy --exit-code 1 --severity CRITICAL \"${env.BASE_IMAGE_NAME}:${COMMIT_HASH}\""
                }
            }
        }

        stage("Push commit images") {
            steps {
                script {

                    withDockerRegistry(credentialsId: 'gcr:jenkins-service-account', url: "https://${env.GCR_URL}") {
                        version = sh(script: "python3 setup.py --version | tr + .", returnStdout: true).trim()
                        docker_image_base.push()
                        docker_image_base.push(version)
                    }
                }
            }
        }


        stage("Push latest images") {

            steps {
                script {

                    withDockerRegistry(credentialsId: 'gcr:jenkins-service-account', url: "https://${env.GCR_URL}") {
                        docker_image_base.push("latest")
                    }
                }
            }
        }

{% endif %}


{%- if cookiecutter.release_pypi == 'y' -%}

        stage('Release on PyPi') {

            when {
                allOf {
                    expression {
                        return env.GIT_BRANCH == "origin/master"
                    }

                    expression {
                        return sh(returnStdout: true, script: "git tag --contains").trim()
                    }

                }
            }

            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'pypi-credentials', usernameVariable: 'PYPI_USERNAME', passwordVariable: 'PYPI_PASSWORD')]) {
                        sh """
                        . venv/bin/activate
                        make release
                        """
                    }
                }
            }

        }

{% endif %}


{%- if cookiecutter.use_docker == 'y' -%}

        stage("Push release images") {

            when {
                allOf {
                    expression {
                        return env.GIT_BRANCH == "origin/master"
                    }

                    expression {
                        return sh(returnStdout: true, script: "git tag --contains").trim()
                    }

                }
            }

            steps {
                script {

                    withDockerRegistry(credentialsId: 'gcr:jenkins-service-account', url: "https://${env.GCR_URL}") {
                        version = sh(script: "python3 setup.py --version", returnStdout: true).trim()
                        docker_image_base.push(version)
                    }
                }
            }
        }

{% endif %}

{%- if cookiecutter.use_gcf == 'y' -%}

        stage("Deploy GCF") {

            when {
                allOf {
                    expression {
                        return env.GIT_BRANCH == "origin/master"
                    }
                    expression {
                        return sh(returnStdout: true, script: "git tag --contains").trim()
                    }

                }
            }

            steps{
                // Here you should copy all files that are needed by the Google Cloud Function
                sh("cp -r src/* gcf/")
                sh("cp requirements.txt gcf/requirements.txt")
                sh("gsutil cp gs://{{cookiecutter.project_bucket}}/{{cookiecutter.pipeline_path}} gcf/static_files/")
                // A Google Cloud Function named as the project will be deployed
                sh("gcloud functions deploy {{ cookiecutter.gcf_name }} \
                        --runtime {{cookiecutter.gcf_python_runtime}} \
                        --region europe-west1 \
                        {%- if cookiecutter.gcf_trigger == "http" -%}
                        --trigger-http \
                        {%- elif cookiecutter.gcf_trigger == "bucket" -%}
                        --trigger-bucket={{cookiecutter.gcf_bucket}} \
                        {%- elif cookiecutter.gcf_trigger == "topic" -%}
                        --trigger-topic={{cookiecutter.gcf_topic}} \
                        {% endif %}
                        --service-account={{cookiecutter.gcf_service_account}}
                        --memory={{cookiecutter.gcf_memory}} \
                        --timeout=540s \
                        --entry-point={{ cookiecutter.gcf_name }} \
                        --source=gcf/")
            }
        }

{% endif %}


        stage('Generate and publish doc release') {

           when {
                allOf {
                    expression {
                        return env.GIT_BRANCH == "origin/master"
                    }

                    expression {
                        return sh(returnStdout: true, script: "git tag --contains").trim()
                    }

                }
           }


            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'pypi-credentials', usernameVariable: 'PYPI_USERNAME', passwordVariable: 'PYPI_PASSWORD')]) {

                        version = sh(script: "python3 setup.py --version", returnStdout: true).trim()
                        sh """
                        . venv/bin/activate
                        ${env.PYTHON_INTERPRETER} -m pip install .
                        ${env.PYTHON_INTERPRETER} -m pip install devpi-client
                        cd docs
                        make confluence
                        make html
                        cd _build/html && zip -r {{cookiecutter.package_name}}-${version}.doc.zip . && cd -
                        devpi use ${PYPI_REPO_STABLE}
                        devpi login ${PYPI_USERNAME} --password=${PYPI_PASSWORD}
                        devpi upload _build/html/{{cookiecutter.package_name}}-${version}.doc.zip
                        """
                    }
                }
            }

        }

    }

    post {
        always {
            cleanWs deleteDirs: true, disableDeferredWipeout: true, patterns: [[pattern: '', type: 'INCLUDE']]
            script {
                if(built_images){
                    sh 'docker images -a | grep ${env.BASE_IMAGE} | awk \'{print \$3}\' | xargs docker rmi -f'
                }
            }

        }
        success {
            slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            sh """
                docker images -a | grep ${env.BASE_IMAGE} | awk \'{print \$3}\' | xargs docker rmi -f
            """
        }
        failure {
            slackSend (color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")

        }
    }
}
