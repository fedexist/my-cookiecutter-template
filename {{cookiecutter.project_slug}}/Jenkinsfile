pipeline {
    agent any

    environment {
        APP_ID = "{{ cookiecutter.project_slug }}"
        LE = "{{ cookiecutter.legal_entity.lower() }}"
        COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        COMMIT_TAG = sh(script: "echo ${GIT_BRANCH} | sed -r 's/[_/.?]+/-/g' | awk '{print tolower(\$0)}' | xargs -I@ echo @-${env.COMMIT_HASH}-${env.BUILD_NUMBER}", returnStdout: true).trim()
        PYTHON_VERSION = '3.9'
        PACKAGE_VERSION = ""
        DOCKER_VERSION = ""
        HOME="${env.WORKSPACE}"
        BRANCH_TYPE = "${GIT_BRANCH.split("/")[0] == 'feature' ? GIT_BRANCH.split("/")[0] : GIT_BRANCH.split("/")[1]}"
    }

    stages {

       stage("Env Config") {
            steps {
                script {
                    // load configs
                    load "cicd/${BRANCH_TYPE}.groovy"
                    echo "Deploy Settings: Env = ${env.ENV}, TargetProjectId = ${env.TARGET_PROJECT}, BranchType = ${env.BRANCH_TYPE}, DockerTag = ${env.COMMIT_TAG}"
                    echo "${env.gitlabMergeRequestId}"
                    // set build name
                    currentBuild.displayName = "Build: [#${BUILD_NUMBER}] - Env: ${env.ENV}"
                    currentBuild.description = "Env: ${env.ENV}\nBranchType = ${env.BRANCH_TYPE}\nTarget: ${env.TARGET_PROJECT}\nDockerTag: ${env.COMMIT_TAG}"
                }
            }
        }

        stage("Checkout platform-terraform-modules") {
            environment {
                AA_MODULES_CRED = credentials("${PLATFORM_TERRAFORM_MODULES_CRED}")
            }
            steps {
                checkout scm
                sh "git clone -c http.sslverify=false https://$AA_MODULES_CRED_USR:$AA_MODULES_CRED_PSW@${PLATFORM_TERRAFORM_MODULES_URL} ./tf/platform-terraform-modules/"
            }
        }

        stage('Clone sources') {

            environment {
                ARTIFACT_PROJECT_OWNER_CREDENTIALS_ID = getCredentialsId(env.ARTIFACT_PROJECT)
            }
            steps {
                // slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                checkout scm

                script {
                    withCredentials([file(credentialsId: env.ARTIFACT_PROJECT_OWNER_CREDENTIALS_ID, variable: "GC_KEY")]) {
                        sh("gcloud auth activate-service-account --key-file=${GC_KEY}")
                        sh("gcloud auth configure-docker ${DOCKER_REGISTRY}")
                    }
                }
            }
        }

        stage('Run tests') {
            environment {
                ARTIFACT_PROJECT_OWNER_CREDENTIALS_ID = getCredentialsId(env.ARTIFACT_PROJECT)
            }

            agent {
                docker {
                    image "${DOCKER_URL}/tox:3.24.5"
                    reuseNode true
                    label '{{ cookiecutter.legal_entity.lower() }}'
                }
            }

            steps {
               script {
                    withCredentials([file(credentialsId: env.ARTIFACT_PROJECT_OWNER_CREDENTIALS_ID, variable: "GOOGLE_APPLICATION_CREDENTIALS")]) {
                        sh """
                        tox
                        """
                    }
                }
            }
        }

        stage('SQ analysis') {

           agent {
                docker {
                    image "sonarsource/sonar-scanner-cli"
                    reuseNode true
                    label '{{ cookiecutter.legal_entity.lower() }}'
                }
            }
            steps {
                withSonarQubeEnv(credentialsId: 'sw00251-aa-sources-plt-sonar-login-token', installationName: 'DATA-ANALYTICS SQ') {
                    sh 'sonar-scanner'
                }
            }
        }


        stage('Publish package on PyPi') {
            environment {
                ARTIFACT_PROJECT_OWNER_CREDENTIALS_ID = getCredentialsId(env.ARTIFACT_PROJECT)
            }

            agent {
                docker {
                    image "${DOCKER_URL}/tox:3.24.5"
                    reuseNode true
                    label '{{ cookiecutter.legal_entity.lower() }}'
                }
            }

            steps {
                script {
                    PACKAGE_VERSION = sh(script: "python3.9 setup.py --version", returnStdout: true).trim()
                    DOCKER_VERSION = sh(script: "echo ${PACKAGE_VERSION} | tr + .", returnStdout: true).trim()
                    withCredentials([file(credentialsId: env.ARTIFACT_PROJECT_OWNER_CREDENTIALS_ID, variable: "GOOGLE_APPLICATION_CREDENTIALS")]) {
                        sh """
                        tox -e clean,build,publish
                        """
                    }
                }
            }
        }

        stage('Build & Deploy docker images'){
            environment {
                ARTIFACT_PROJECT_OWNER_CREDENTIALS_ID = getCredentialsId(env.ARTIFACT_PROJECT)
            }
            agent {
                docker {
                    image "${DOCKER_URL}/aa-terraform:1.0"
                    reuseNode true
                    args '-u root:root --entrypoint= -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                withCredentials([
                    file(credentialsId: env.TERRAFORM_SA_CRED_NAME, variable: "GOOGLE_APPLICATION_CREDENTIALS"),
                    file(credentialsId: env.ARTIFACT_PROJECT_OWNER_CREDENTIALS_ID, variable: "DOCKER_APPLICATION_CREDENTIALS"),
                ]) {
                    script {
                        echo "${PACKAGE_VERSION}"
                        echo "${DOCKER_VERSION}"

                        sh """
                            terraform -chdir=\$(pwd)/tf init \
                                -no-color \
                                -compact-warnings \
                                -backend-config=bucket=${env.STATE_BUCKET}
                        """
                        sh """
                            terraform -chdir=\$(pwd)/tf apply \
                                -auto-approve \
                                -no-color \
                                -compact-warnings \
                                -var-file=env/${env.ENV}.tfvars \
                                -var=target_project=${env.ARTIFACT_PROJECT} \
                                -var=gcp_sa_key=${DOCKER_APPLICATION_CREDENTIALS} \
                                -var=service_version=${DOCKER_VERSION} \
                                -var=build_args=PACKAGE_VERSION=${PACKAGE_VERSION},BASE_IMAGE=${BASE_IMAGE} \
                                -var=secrets="id=creds,src=${DOCKER_APPLICATION_CREDENTIALS}"
                        """

                        sh("chown -R 999:999 .")
                    }
                }
            }
        }

    }

    post {
        always {
            cleanWs()
            script {
                  sh("docker images -a | grep '${env.APP_ID}' | awk \'{print \$3}\' | xargs --no-run-if-empty docker rmi -f")
            }
        }
        success {
            slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", tokenCredentialId: 'slack-connection-token')
        }
        failure {
            slackSend (color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", tokenCredentialId: 'slack-connection-token')

        }
    }
}

def getCredentialsId(projectId) {
    return projectId + "-json"
}
