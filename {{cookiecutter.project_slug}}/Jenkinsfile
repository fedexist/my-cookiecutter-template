pipeline {
    agent any

    environment {
        CREDENTIALS_ID = "${PROJECT_ID}-json"
        GCR_URL = "eu.gcr.io/${PROJECT_ID}"
        COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        COMMIT_TAG = sh(script: "echo ${GIT_BRANCH} | sed -r 's/[_/.?]+/-/g' | awk '{print tolower(\$0)}' | xargs -I@ echo @-${env.COMMIT_HASH}-${env.BUILD_NUMBER}", returnStdout: true).trim()
        PYTHON_INTERPRETER = 'python{{ cookiecutter.python_version }}'
        PYTHON_VERSION = '{{ cookiecutter.python_version }}'
        PACKAGE_VERSION = sh(script: "python3 setup.py --version", returnStdout: true).trim()
        PYPI_REPO_STAGING = "http://pypi.advancedanalytics.generali.com/ge-it-aa/staging/"
        PYPI_REPO_STABLE = "http://pypi.advancedanalytics.generali.com/ge-it-aa/stable/"
        CONFLUENCE_TOKEN = credentials('confluence-token')
        HOME="${env.WORKSPACE}"
    }

    stages {

        stage('Clone sources') {
            steps {
                slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                sh """
                echo ${env.BRANCH_NAME}
                echo ${env.TAG_NAME}
                """
                git branch: env.gitlabSourceBranch, poll: false, credentialsId: '2bd6f462-e60e-4de9-a67c-da11e3829363', url: env.gitlabSourceRepoHttpUrl

                script {
                    withCredentials([file(credentialsId: env.CREDENTIALS_ID, variable: "GC_KEY")]) {
                        sh("gcloud auth activate-service-account --key-file=${GC_KEY}")
                        sh("gcloud auth configure-docker")
                    }
                }
            }
        }

       stage("Env Config") {
            steps {
                script {
                    // load configs
                    load "cicd/${BRANCH_TYPE}.groovy"
                    echo "Deploy Settings: Env = ${env.ENV}, TargetProjectId = ${env.TARGET_PROJECT}, BranchType = ${env.BRANCH_TYPE}, DockerTag = ${env.COMMIT_TAG}"
                    // set build name
                    currentBuild.displayName = "Build: [#${BUILD_NUMBER}] - Env: ${env.ENV}"
                    currentBuild.description = "Env: ${env.ENV}\nBranchType = ${env.BRANCH_TYPE}\nTarget: ${env.TARGET_PROJECT}\nDockerTag: ${env.COMMIT_TAG}"
                }
            }
        }

        stage('Run tests') {

            agent {
                docker {
                    image "eu.gcr.io/${env.ARTIFACT_PROJECT}/aa-python:${PYTHON_VERSION}-slim"
                    reuseNode true
                    label '{{ cookiecutter.legal_entity.lower() }}'
                }
            }
            steps {
                sh '''
                pip install -r requirements_dev.txt
                tox
                '''
            }
        }

        stage('SQ analysis') {

           agent {
                docker {
                    image "sonarsource/sonar-scanner-cli"
                    reuseNode true
                    label '{{ cookiecutter.legal_entity.lower() }}'
                }
            }
            environment {
                scannerHome = tool 'sonar_scanner'
            }
            steps {
                withSonarQubeEnv(credentialsId: 'sonarqube_token', installationName: 'sonarqube_aa') {
                    sh '${scannerHome}/bin/sonar-scanner'
                }
            }
        }


        stage('Staging on PyPi') {
            agent {
                docker {
                    image "eu.gcr.io/${env.ARTIFACT_PROJECT}/aa-python:${PYTHON_VERSION}-slim"
                    reuseNode true
                    label '{{ cookiecutter.legal_entity.lower() }}'
                }
            }
            steps {
                script {
                    withCredentials([file(credentialsId: env.CREDENTIALS_ID, variable: "GOOGLE_APPLICATION_CREDENTIALS")]) {
                        sh """
                        make staging
                        """
                    }
                }
            }
        }

/*
        stage('Generate and publish doc staging') {
            agent {
                docker {
                    image "eu.gcr.io/${env.ARTIFACT_PROJECT}/aa-python:${PYTHON_VERSION}-slim"
                    reuseNode true
                    label '{{ cookiecutter.legal_entity.lower() }}'
                }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'pypi-credentials', usernameVariable: 'PYPI_USERNAME', passwordVariable: 'PYPI_PASSWORD')]) {
                        sh """
                        pip install .
                        pip install devpi-client
                        make docs
                        cd docs
                        cd _build/html && zip -r {{cookiecutter.package_name}}-${version}.doc.zip . && cd -
                        devpi use ${PYPI_REPO_STAGING}
                        devpi login ${PYPI_USERNAME} --password=${PYPI_PASSWORD}
                        devpi upload _build/html/{{cookiecutter.package_name}}-${version}.doc.zip
                        """
                    }
                }
            }

        }
*/
        stage('Release on PyPi') {
           agent {
                docker {
                    image "eu.gcr.io/${env.ARTIFACT_PROJECT}/aa-python:${PYTHON_VERSION}-slim"
                    reuseNode true
                    label '{{ cookiecutter.legal_entity.lower() }}'
                }
            }

            when {
                allOf {
                    expression {
                        return env.GIT_BRANCH == "origin/master"
                    }

                    expression {
                        return sh(returnStdout: true, script: "git tag --contains").trim()
                    }

                }
            }

            steps {
                script {
                    withCredentials([file(credentialsId: env.CREDENTIALS_ID, variable: "GOOGLE_APPLICATION_CREDENTIALS")]) {
                        sh """
                        make release
                        """
                    }
                }
            }

        }

        stage('Generate and publish doc release') {
           agent {
                docker {
                    image "eu.gcr.io/${env.ARTIFACT_PROJECT}/aa-python:${PYTHON_VERSION}-slim"
                    reuseNode true
                    label '{{ cookiecutter.legal_entity.lower() }}'
                }
            }

           when {
                allOf {
                    expression {
                        return env.GIT_BRANCH == "origin/master"
                    }

                    expression {
                        return sh(returnStdout: true, script: "git tag --contains").trim()
                    }

                }
           }

            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'pypi-credentials', usernameVariable: 'PYPI_USERNAME', passwordVariable: 'PYPI_PASSWORD')]) {

                        sh """
                        pip install .
                        pip install devpi-client
                        make docs-release
                        cd docs
                        cd _build/html && zip -r {{cookiecutter.package_name}}-${version}.doc.zip . && cd -
                        devpi use ${PYPI_REPO_STABLE}
                        devpi login ${PYPI_USERNAME} --password=${PYPI_PASSWORD}
                        devpi upload _build/html/{{cookiecutter.package_name}}-${version}.doc.zip
                        """
                    }
                }
            }

        }

    }

    post {
        always {
            sh "sudo chmod -R 777 ."
            cleanWs deleteDirs: true, disableDeferredWipeout: true, patterns: [[pattern: '', type: 'INCLUDE']]
        }
        success {
            slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
        failure {
            slackSend (color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")

        }
    }
}
