Features
==============================

Here is a bit more information about all of the development tools used by every project generated by ``aa-pypackage``.

tox
~~~
Link: https://tox.readthedocs.io/en/latest/

tox is one of the most widely used test runner available for python. It is used for running commands within many different virtual environments, defined in its configuration file, tox.ini.

In order to use it, just run ``tox``.

pytest
~~~~~~

Link: https://docs.pytest.org/en/stable/

Pytest is one of the best testing frameworks available for python. When you’re implementing your unit tests, please use its very useful features like monkeypatching, fixtures et al.

Pytest will run when running tox, together with all of the other development and testing tools. If you only want to run your tests, please run

.. code-block:: bash

    py.test

pylint & flake8
~~~~~~~~~~~~~~~

Link: https://flake8.pycqa.org/en/latest/

Link: https://www.pylint.org/

Flake8 and Pylint are linters and style enforcer. They help in keeping a project in order and neat.
They will run while tox is executing, but you can run them standalone using

.. code-block:: bash

    tox -e flake8
    # or
    flake8 src/ tests
    # Run pylint with
    pylint YOUR_PACKAGE_NAME -ry -f parseable


mypy
~~~~

Link: http://mypy-lang.org/

Mypy is a tool for static type checking for python. It helps in making sure that you’re not making any mistakes while using Python type hints.

Run it with

.. code-block:: bash

    mypy --package YOUR_PACKAGE_NAME

radon & xenon
~~~~~~~~~~~~~
Links: https://radon.readthedocs.io/en/latest/ & https://xenon.readthedocs.io/en/stable/

These two tools are used to statically analise the code and its complexity, making sure that the code is readable and easy to understand.

.. code-block:: bash

    radon cc --show-complexity src/
    xenon --max-absolute C --max-modules B --max-average A src/


make
~~~~
Make is unix utility to execute commands under useful aliases, a Makefile has been implemented with the following available commands:


.. code-block::

    clean                remove all build, test, coverage and Python artifacts
    clean-build          remove build artifacts
    clean-pyc            remove Python file artifacts
    clean-test           remove test and coverage artifacts
    lint                 check style with flake8
    test                 run tests quickly with the default Python
    test-all             run tests on every Python version with tox
    coverage             check code coverage quickly with the default Python
    docs                 generate Sphinx HTML documentation
    servedocs            compile the docs watching for changes
    staging              package and upload a staging release
    release              package and upload a stable release
    dist                 builds source and wheel package
    install              install the package to the active Python's site-packages